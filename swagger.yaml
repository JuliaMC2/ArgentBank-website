swagger: "2.0"
info:
  title: Swagger Argent Bank - by JMCC
  description: Ce document correspond à la phase 2 du projet Argent Bank proposé par Open Classroom dans le cadre de la formation d"intégratrice Web. Il traite les endpoints hypothétiques d'une API REST qui servirait à récupérer les comptes et transactions en offrant la possibilité de modifier la catégorie et la note associée à chaque transaction.
  version: "1.1"
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: "#/definitions/Login"
      produces:
        - application/json
      responses:
        "200":
          description: Login Successfully
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: "#/definitions/User"
      produces:
        - application/json
      responses:
        "200":
          description: Signup Successfully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      #produces:
       # - application/json
      responses:
        "200":
          description: User profile retrieved successully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: "#/definitions/UserProfile"
      produces:
        - application/json
      responses:
        "200":
          description: User profile retrieved successully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
  /accounts:
    get:
      tags:
        - accounts
      summary: Récupération de la liste des comptes
      description: Rapatrie la liste des comptes afin d"en afficher les résumés
      produces:
        - application/json
      responses:
        "200":
          description: Opération réussie
          schema:
            $ref: "#/definitions/Accounts"          
        "403":
          description: utilisateur non connecté
  /transactions/{account_id}:
    get:
      tags:
        - transactions
      summary: Renvoie les transactions propres au compte dont l"identifiant est passé en paramètre
      description: Renvoie un tableau des transactions associées au compte portant l"identifiant passé en paramètre
      parameters:
        - name: account_id
          type: integer
          format: int64
          in: path
          description: identifiant du compte dont on souhaite récupérer les transactions
          required: true
      produces:
        - application/json
      responses:
        "200":
          description: Opération réussie
          schema:
            $ref: "#/definitions/Transactions"          
        "403":
          description: utilisateur non connecté
        "404":
          description: le compte référencé par l"identifiant n"existe pas
  /transaction/{account_id}/{transaction_id}:
    get:
      tags:
        - transactions
      summary: Renvoie la transaction pointée par les identifiants de compte et de transaction passés dans l"URL
      description: Renvoie la transaction sous forme d"objet json si les deux paramètres pointent vers une transaction existante
      operationId: getTransaction
      parameters:
        - name: account_id
          type: integer
          format: int64
          in: path
          description: identifiant du compte dont on souhaite récupérer une transaction
          required: true
        - name: transaction_id
          type: integer
          format: int64
          in: path
          description: identifiant de la transaction à récupérer
          required: true
      produces:
        - application/json
      responses:
        "200":
          description: Opération réussie
          schema:
            $ref: "#/definitions/Transaction"          
        "403":
          description: utilisateur non connecté
        "404":
          description: la transaction pointée par les identifiants utilisés dans l"URL n"existe pas
    put:
      tags:
        - transactions
      summary: Met à jour la catégorie, la note ou les deux champs associés à cette transaction
      description: Mise à jour des champs fournis dans le payload
      parameters:
        - name: account_id
          in: path
          description: identifiant du compte dont on souhaite modifier une transaction
          required: true
          type: integer
          format: int64
        - name: transaction_id
          in: path
          description: identifiant de la transaction à modifier
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: champs mis à jour
          required: true
          schema:
            $ref: "#/definitions/TransactionDetail"
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: Opération réussie
          schema:
            $ref: "#/definitions/Transaction"
        "400":
          description: mauvaises valeurs
        "403":
          description: utilisateur non connecté
        "404":
          description: la transaction pointée par les identifiants utilisés dans l"URL n"existe pas
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
      userName:
        type: string
        description: user public name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  Accounts:
    type: object
    properties:
      account_id:
        type: integer
        description: identifiant interne du compte
        format: int64
        example: 10
      title:
        type: string
        description: nom du compte tel qu"affiché
        example: Argent Bank Checking (x8349)
      amount:
        type: number
        format: float
        description: montant disponible (sans le symbole de devise)
        example: 2082.79
      description:
        type: string
        description: description du type de montant disponible
        example: Available Balance
  Transactions:
    type: array
    items:
      $ref: "#/definitions/Transaction"
  Transaction:
    type: object
    properties:
      account_id:
        type: integer
        description: identifiant interne du compte portant la transaction
        format: int64
        example: 10
      transaction_id:
        type: integer
        description: identifiant interne de la transaction compte
        format: int64
        example: 10
      date:
        type: string
        description: date d"écriture de la transaction
        format: date
        example: 27/02/2020
      description:
        type: string
        description: tierce partie de la transaction
        example: Golden Sun Bakery
      amount:
        type: number
        description: montant de la transaction (sans le symbople de devise)
        format: float
        example: 8.00
      balance:
        type: number
        description: montant disponible sur le compte après la transaction (sans le symbople de devise)
        format: float
        example: 298.00
      type:
        type: string
        description: type de transaction
        example: Electronic
      category:
        type: string
        description: catégorie de la transaction
        example: Food
        enum:
          - Food
          - Mandatory
          - Loan
          - Leisure
      note:
        type: string
        description: note libre pour décrire la transaction
        example: lorem ipsum
  TransactionDetail:
    type: object
    properties:
      category:
        type: string
        description: catégorie de la transaction
        example: Food
        enum:
          - Food
          - Mandatory
          - Loan
          - Leisure
      note:
        type: string
        description: note libre pour décrire la transaction
        example: lorem ipsum
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      userName:
        type: string
